version: "3.7"

volumes:
  orderer.example.com:
  peer0.org1.example.com:

services:
  bal-ganache:
    build:
      context: ./bal
      target: bal-ethereum
    restart: always
    container_name: bal-ganache
    ports:
      - "8081:8080"
    networks:
      case-study:
        ipv4_address: 172.16.238.10

  bal-fabric:
    build:
      context: ./bal
      target: bal-fabric
    restart: always
    container_name: bal-fabric
    ports:
      - "8082:8080"
    networks:
      case-study:
        ipv4_address: 172.16.238.11

  ganache-with-truffle:
    container_name: ganache-with-truffle
    build:
      context: ./ganache-cli
      target: ganache
    command:
      [
        "ganache-cli",
        "-m",
        "smart contract composition",
        "--defaultBalanceEther",
        "100000000",
        "-l",
        "471238800",
        "-g",
        "1",
        "-v",
        "--keepAliveTimeout",
        "15000",
        "-b",
        "3",
      ]
    ports:
      - "8545:8545"
    networks:
      case-study:
        ipv4_address: 172.16.238.12

  orderer.example.com:
    container_name: orderer.example.com
    image: hyperledger/fabric-orderer:latest
    environment:
      - FABRIC_LOGGING_SPEC=DEBUG
      - GRPC_TRACE=all=true,
      - GRPC_VERBOSITY=debug
      - ORDERER_GENERAL_LOGLEVEL=DEBUG
      - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0
      - ORDERER_GENERAL_LISTENPORT=7050
      - ORDERER_GENERAL_GENESISMETHOD=file
      - ORDERER_GENERAL_GENESISFILE=/var/hyperledger/orderer/orderer.genesis.block
      - ORDERER_GENERAL_LOCALMSPID=OrdererMSP
      - ORDERER_GENERAL_LOCALMSPDIR=/var/hyperledger/orderer/msp
      # enabled TLS
      - ORDERER_GENERAL_TLS_ENABLED=true
      - ORDERER_GENERAL_TLS_PRIVATEKEY=/var/hyperledger/orderer/tls/server.key
      - ORDERER_GENERAL_TLS_CERTIFICATE=/var/hyperledger/orderer/tls/server.crt
      - ORDERER_GENERAL_TLS_ROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]
      - ORDERER_KAFKA_TOPIC_REPLICATIONFACTOR=1
      - ORDERER_KAFKA_VERBOSE=true
      - ORDERER_GENERAL_CLUSTER_CLIENTCERTIFICATE=/var/hyperledger/orderer/tls/server.crt
      - ORDERER_GENERAL_CLUSTER_CLIENTPRIVATEKEY=/var/hyperledger/orderer/tls/server.key
      - ORDERER_GENERAL_CLUSTER_ROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric
    command: orderer
    volumes:
      - ./fabric/channel-artifacts/genesis.block:/var/hyperledger/orderer/orderer.genesis.block
      - ./fabric/crypto-config/ordererOrganizations/example.com/orderers/orderer.example.com/msp:/var/hyperledger/orderer/msp
      - ./fabric/crypto-config/ordererOrganizations/example.com/orderers/orderer.example.com/tls/:/var/hyperledger/orderer/tls
      - orderer.example.com:/var/hyperledger/production/orderer
    ports:
      - 7050:7050
    networks:
      case-study:
        ipv4_address: 172.16.238.13

  peer0.org1.example.com:
    container_name: peer0.org1.example.com
    image: hyperledger/fabric-peer:latest
    environment:
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=bal_case-study
      - FABRIC_LOGGING_SPEC=DEBUG
      - CORE_LOGGING_LEVEL=DEBUG
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      # combine inherited properties as extend is not supported in v3+
      - CORE_PEER_ID=peer0.org1.example.com
      - CORE_PEER_ADDRESS=peer0.org1.example.com:7051
      - CORE_PEER_LISTENADDRESS=0.0.0.0:7051
      - CORE_PEER_CHAINCODEADDRESS=peer0.org1.example.com:7052
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:7052
      - CORE_PEER_LOCALMSPID=Org1MSP
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
    volumes:
      - /var/run/:/host/var/run/
      - ./fabric/crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/msp:/etc/hyperledger/fabric/msp
      - ./fabric/crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls:/etc/hyperledger/fabric/tls
      - peer0.org1.example.com:/var/hyperledger/production
    ports:
      - 7051:7051
    networks:
      case-study:
        ipv4_address: 172.16.238.14

  ca0:
    image: hyperledger/fabric-ca:latest
    environment:
      - FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server
      - FABRIC_CA_SERVER_CA_NAME=ca-org1
      - FABRIC_CA_SERVER_TLS_ENABLED=true
      - FABRIC_CA_SERVER_TLS_CERTFILE=/etc/hyperledger/fabric-ca-server-config/ca.org1.example.com-cert.pem
      - FABRIC_CA_SERVER_TLS_KEYFILE=/etc/hyperledger/fabric-ca-server-config/2b7b5fcae2a6f9d736d77c8b625094031dd5b51d2078edd1ec1c5df6cea8b246_sk
      - FABRIC_CA_SERVER_PORT=7054
    ports:
      - "7054:7054"
    command: sh -c 'fabric-ca-server start --ca.certfile /etc/hyperledger/fabric-ca-server-config/ca.org1.example.com-cert.pem --ca.keyfile /etc/hyperledger/fabric-ca-server-config/2b7b5fcae2a6f9d736d77c8b625094031dd5b51d2078edd1ec1c5df6cea8b246_sk -b admin:adminpw -d'
    volumes:
      - ./fabric/crypto-config/peerOrganizations/org1.example.com/ca/:/etc/hyperledger/fabric-ca-server-config
    container_name: ca_peerOrg1
    networks:
      case-study:
        ipv4_address: 172.16.238.16

  cli:
    container_name: cli
    image: hyperledger/fabric-tools:latest
    tty: true
    stdin_open: true
    environment:
      - SYS_CHANNEL=bal-sys-channel
      - GOPATH=/opt/gopath
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      #- FABRIC_LOGGING_SPEC=DEBUG
      - FABRIC_LOGGING_SPEC=INFO
      - CORE_PEER_ID=cli
      - CORE_PEER_ADDRESS=peer0.org1.example.com:7051
      - CORE_PEER_CHAINCODELISTENADDRESS=peer0.org1.com:7052
      - CORE_PEER_LOCALMSPID=Org1MSP
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt
      - CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    # run script for registering and joining the channel + run test chaincode commands
    command: /bin/bash
    volumes:
      - /var/run/:/host/var/run/
      - ../smartcontracts/fabric:/opt/gopath/src/github.com/chaincode
      - ./fabric/crypto-config:/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/
      - ./fabric/scripts:/opt/gopath/src/github.com/hyperledger/fabric/peer/scripts/
      - ./fabric/channel-artifacts:/opt/gopath/src/github.com/hyperledger/fabric/peer/channel-artifacts
    depends_on:
      - orderer.example.com
      - peer0.org1.example.com
      - ca0
    networks:
      case-study:
        ipv4_address: 172.16.238.15

  # case-study-backend:
  #   build:
  #     context: ./client-app/java-backend
  #   restart: always
  #   container_name: case-study-backend
  #   ports:
  #     - "8080:8080"
  #   environment:
  #     - CLIENT_CALLBACK_URL=http://case-study-backend:8080
  #     - DAIRY_BAL_URL=http://172.16.238.11:8080/blockchain-access-layer
  #     - DAIRY_SC_ADDRESS=mychannel/dairy
  #     - SEAFOOD_BAL_URL=http://172.16.238.10:8080/blockchain-access-layer
  #     - SEAFOOD_SC_ADDRESS=0x75f17644EAEb3cC6511764a6F1138F14B3e33D0f
  #   networks:
  #     case-study:
  #       ipv4_address: 172.16.238.17

  nodejs-backend:
    build:
      context: ./client-app/nodejs-backend
    restart: always
    container_name: nodejs-backend
    ports:
      - "3000:3000"
    networks:
      case-study:
        ipv4_address: 172.16.238.18

  tool:
    build:
      context: ./client-app/tool
    restart: always
    container_name: tool
    ports:
      - "3001:3001"
    networks:
      case-study:
        ipv4_address: 172.16.238.19

networks:
  case-study:
    ipam:
      driver: default
      config:
        - subnet: "172.16.238.0/24"
